{"ast":null,"code":"import { map } from \"rxjs\";\nimport { environment } from \"../enviroment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let RecommendationService = /*#__PURE__*/(() => {\n  class RecommendationService {\n    http;\n    apiKey = environment.TMDB_API_KEY;\n    constructor(http) {\n      this.http = http;\n    }\n    getRecommendations(userMovies, page = 1) {\n      const genreCount = {};\n      userMovies.forEach(movie => {\n        movie.genre_ids?.forEach(genre => {\n          genreCount[genre] = (genreCount[genre] || 0) + 1;\n        });\n      });\n      const topGenres = Object.entries(genreCount).sort((a, b) => b[1] - a[1]).slice(0, 3).map(([id]) => id).join(',');\n      if (!topGenres) {\n        return this.getPopularMovies(page);\n      }\n      return this.http.get(`https://api.themoviedb.org/3/discover/movie?api_key=${this.apiKey}&with_genres=${topGenres}&sort_by=popularity.desc&page=${page}`).pipe(map(res => res.results.filter(movie => !userMovies.some(userMovie => userMovie.id === movie.id))));\n    }\n    getPopularMovies(page = 1) {\n      return this.http.get(`https://api.themoviedb.org/3/movie/popular?api_key=${this.apiKey}&page=${page}`).pipe(map(res => res.results));\n    }\n    static ɵfac = function RecommendationService_Factory(t) {\n      return new (t || RecommendationService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RecommendationService,\n      factory: RecommendationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return RecommendationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}